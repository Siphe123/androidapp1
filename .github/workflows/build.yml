  Skip to content
    Product
    Solutions
    Open Source
    Pricing
    
    Search or jump to...
    Sign in
    Sign up
    Marketplace Actions automated-build-android-app-with-github-action
    GitHub Action
    automated-build-android-app-with-github-action
    2.2.3
    Latest version
    Automated Build Android Using Github Action
    Android CI Download Generated APK AAB Upload Generated APK AAB Scan with Detekt pages-build-deployment Generated APK AAB (Clean)
    
    Available on Google Dev Library Click Here
    Project Github Action Script YAML
    Using Github Workflows
    Automated Build AAB (release)
    Automated Build APK (release and debug)
    Have Bundle Tool
    Download Artifact
    Upload Artifact
    Clear (Articfact naming)
  Sample Naming : ${date_today} - ${repository_name} - ${playstore_name} - APK(s) release generated
    Private Repository Tested (Passed Build App bundle(s) and APK generated successfully)
    Full Code For Github Action Workflows Click Here
    Version Release
    This Is Latest Release
    
    $version_release = 2.2.3
    What's New??
    
    * Update Action Script *
    * Update Android Studio Latest Version *
    * Update Gradle Latest Version *
    * Update Kotlin Latest Version *
    * Update Java Version From 11 to 17 *
    * Update Java Action version to 3 *
    * Update Android SDK Tools *
    * Add Bundletool.jar for workflow github action *
    Article Sources
    How To Securely Build and Sign Your Android App With GitHub Actions
    How to Use GitHub Actions to Automate Android App Development
    Update Java Checkout Version CI
    Guide Sources (Github Action)
    Download Artifact From Github Action
    Upload Artifact From Github Action
    Remove Artifact
    How To Use Workflows
    Step 1. Upload Your Project on Github
    Project must be android studio project using gradle
    Step 2. Create files github workflows
    Create Files with name generate-apk-aab-debug-release.yml inside folder .github/workflows/
    .github/workflows/generate-apk-aab-debug-release.yml this is position files
    Step 3. Create Code
  name: Generated APK AAB (Upload - Create Artifact To Github Action)

  env:
    # The name of the main module repository
    main_project_module: app

    # The name of the Play Store
    playstore_name: Frogobox ID

  on:

    push:
      branches:
        - 'master/**'

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

  jobs:
    build:

      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v3

        # Set Current Date As Env Variable
        - name: Set current date as env variable
          run: echo "date_today=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

        # Set Repository Name As Env Variable
        - name: Set repository name as env variable
          run: echo "repository_name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV

        - name: Set Up JDK
          uses: actions/setup-java@v3
          with:
            distribution: 'zulu' # See 'Supported distributions' for available options
            java-version: '17'
            cache: 'gradle'

        - name: Change wrapper permissions
          run: chmod +x ./gradlew

        # Run Tests Build
        - name: Run gradle tests
          run: ./gradlew test

        # Run Build Project
        - name: Build gradle project
          run: ./gradlew build

        # Create APK Debug
        - name: Build apk debug project (APK) - ${{ env.main_project_module }} module
          run: ./gradlew assembleDebug

        # Create APK Release
        - name: Build apk release project (APK) - ${{ env.main_project_module }} module
          run: ./gradlew assemble

        # Create Bundle AAB Release
        # Noted for main module build [main_project_module]:bundleRelease
        - name: Build app bundle release (AAB) - ${{ env.main_project_module }} module
          run: ./gradlew ${{ env.main_project_module }}:bundleRelease

        # Upload Artifact Build
        # Noted For Output [main_project_module]/build/outputs/apk/debug/
        - name: Upload APK Debug - ${{ env.repository_name }}
          uses: actions/upload-artifact@v3
          with:
            name: ${{ env.date_today }} - ${{ env.playstore_name }} - ${{ env.repository_name }} - APK(s) debug generated
            path: ${{ env.main_project_module }}/build/outputs/apk/debug/

        # Noted For Output [main_project_module]/build/outputs/apk/release/
        - name: Upload APK Release - ${{ env.repository_name }}
          uses: actions/upload-artifact@v3
          with:
            name: ${{ env.date_today }} - ${{ env.playstore_name }} - ${{ env.repository_name }} - APK(s) release generated
            path: ${{ env.main_project_module }}/build/outputs/apk/release/

        # Noted For Output [main_project_module]/build/outputs/bundle/release/
        - name: Upload AAB (App Bundle) Release - ${{ env.repository_name }}
          uses: actions/upload-artifact@v3
          with:
            name: ${{ env.date_today }} - ${{ env.playstore_name }} - ${{ env.repository_name }} - App bundle(s) AAB release generated
            path: ${{ env.main_project_module }}/build/outputs/bundle/release/
    Step 4. Automated Build on Actions tab on your github repository
    ScreenShot
    
    Step 5. Download Artifact
    ScreenShot
    
    Extras (Private Repository Succesfully Build Proven)
    ScreenShot
    
    Result Generated from Github Action
    APK(s) debug generated
    ScreenShot
    
    APK(s) release generated
    ScreenShot
    
    App bundle(s) release generated
    ScreenShot
    
    Clean Up Artifact
  name: Generated APK AAB (Clean)

  on:
    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

    schedule:
      # Every day at 1am
      - cron: '0 1 * * *'

  jobs:
    remove-old-artifacts:
      runs-on: ubuntu-latest
      timeout-minutes: 10

      steps:
        - name: Clean all artifacts
          uses: c-hive/gha-remove-artifacts@v1
          with:
            age: '60 seconds' # '<number> <unit>', e.g. 5 days, 2 years, 90 seconds, parsed by Moment.js
            # Optional inputs
            # skip-tags: true
            # skip-recent: 5
    Using Bundle Tool
    Step 1. Prepare Bundle Tool
    Check Bundletool on (.github/lib/bundletool.jar) Download Latest
    Step 2. Code Action in file android-ci-generate-apk-aab-upload-3.yml
  name: Generated APK AAB 2 Bundle Tool (Upload - Create Artifact To Github Action)

  env:
    # The name of the main module repository
    main_project_module: app

    # The name of the Play Store
    playstore_name: Frogobox ID

    # Keystore Path
    ks_path: frogoboxdev.jks

    # Keystore Password
    ks_store_pass: cronoclez

    # Keystore Alias
    ks_alias: frogobox

    # Keystore Alias Password
    ks_alias_pass: xeonranger

  on:

    push:
      branches:
        - 'release/**'

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

  jobs:
    build:

      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v3

        # Set Current Date As Env Variable
        - name: Set current date as env variable
          run: echo "date_today=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

        # Set Repository Name As Env Variable
        - name: Set repository name as env variable
          run: echo "repository_name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV

        - name: Set Up JDK
          uses: actions/setup-java@v3
          with:
            distribution: 'zulu' # See 'Supported distributions' for available options
            java-version: '17'
            cache: 'gradle'

        - name: Change wrapper permissions
          run: chmod +x ./gradlew

        # Run Tests Build
        - name: Run gradle tests
          run: ./gradlew test

        # Run Build Project
        - name: Build gradle project
          run: ./gradlew build

        # Create APK Debug
        - name: Build apk debug project (APK) - ${{ env.main_project_module }} module
          run: ./gradlew assembleDebug

        # Create APK Release
        - name: Build apk release project (APK) - ${{ env.main_project_module }} module
          run: ./gradlew assemble

        # Create Bundle AAB Release
        # Noted for main module build [main_project_module]:bundleRelease
        - name: Build app bundle release (AAB) - ${{ env.main_project_module }} module
          run: ./gradlew ${{ env.main_project_module }}:bundleRelease

        # - name: Build APK(s) Debug from bundle using bundletool
        #   run: java -jar ".github/lib/bundletool.jar" build-apks --bundle=${{ env.main_project_module }}/build/outputs/bundle/debug/${{ env.artifact_name }}-debug.aab --output=${{ env.main_project_module }}/build/outputs/bundle/debug/${{ env.artifact_name }}-debug.apks --mode=universal

        - name: Set Env Artifact name from generated aab
          run: |
            cd ${{ env.main_project_module }}/build/outputs/bundle/release/
            files=(*)
            echo "generated_name_aab=${files[0]%.*}" >> $GITHUB_ENV

        # Build APK From Bundle Using Bundletool
        # Noted For Output [main_project_module]/build/outputs/bundle/release/
        - name: Build APK(s) Release from bundle using bundletool (Path same with bundle output)
          run: java -jar ".github/lib/bundletool.jar" build-apks --bundle=${{ env.main_project_module }}/build/outputs/bundle/release/${{ env.generated_name_aab }}.aab --output=${{ env.main_project_module }}/build/outputs/bundle/release/${{ env.generated_name_aab }}.apks --mode=universal --ks="app/${{ env.ks_path }}" --ks-pass=pass:${{ env.ks_store_pass }} --ks-key-alias=${{ env.ks_alias }} --key-pass=pass:${{ env.ks_alias_pass }}

        # Duplicate APK(s) Release to zip file and extract
        - name: Duplicate APK(s) Release to zip file and extract
          run: |
            cd ${{ env.main_project_module }}/build/outputs/bundle/release/
            unzip -p ${{ env.generated_name_aab }}.apks universal.apk > ${{ env.generated_name_aab }}.apk

        # Upload Artifact Build
        # Noted For Output [main_project_module]/build/outputs/apk/debug/
        - name: Upload APK Debug - ${{ env.repository_name }}
          uses: actions/upload-artifact@v3
          with:
            name: ${{ env.date_today }} - ${{ env.playstore_name }} - ${{ env.repository_name }} - APK(s) debug generated
            path: ${{ env.main_project_module }}/build/outputs/apk/debug/

        # Noted For Output [main_project_module]/build/outputs/apk/release/
        - name: Upload APK Release - ${{ env.repository_name }}
          uses: actions/upload-artifact@v3
          with:
            name: ${{ env.date_today }} - ${{ env.playstore_name }} - ${{ env.repository_name }} - APK(s) release generated
            path: ${{ env.main_project_module }}/build/outputs/apk/release/

        # Noted For Output [main_project_module]/build/outputs/bundle/release/
        - name: Upload AAB (App Bundle) Release - ${{ env.repository_name }}
          uses: actions/upload-artifact@v3
          with:
            name: ${{ env.date_today }} - ${{ env.playstore_name }} - ${{ env.repository_name }} - App bundle(s) AAB release generated
            path: ${{ env.main_project_module }}/build/outputs/bundle/release/
    Step 3. Running Action
    ScreenShot
    
    Step 4. Waiting Running Action
    Waiting for running action
    ScreenShot
    
    Check periodically, afraid there is an error
    ScreenShot
    
    Step 5. Download Artifact and Extract it
    Download Artifact (AAB Artifact)
    ScreenShot
    
    Extract it !!! Done
    ScreenShot
    
    Colaborator
    Very open to anyone, I'll write your name under this, please contribute by sending an email to me
    
    Mail To faisalamircs@gmail.com
  Subject : Github _ [Github-Username-Account] _ [Language] _ [Repository-Name]
  Example : Github_amirisback_kotlin_admob-helper-implementation
    Name Of Contribute
    
    Muhammad Faisal Amir
    Waiting List
    Waiting List
    Waiting for your contribute
    
    Attention !!!
    Please enjoy and don't forget fork and give a star
    Don't Forget Follow My Github Account
    ScreenShot
    
    Stars
    Contributors
    @amirisback@frogoboxbot
    Categories
    Continuous integration Mobile CI
    Links
    amirisback/automated-build-android-app-with-github-action
    Open issues0
    Pull requests1
    Report abuse
    automated-build-android-app-with-github-action is not certified by GitHub. It is provided by a third-party and is governed by separate terms of service, privacy policy, and support documentation.
    
    Subscribe to our developer newsletter
    Get tips, technical guides, and best practices. Twice a month. Right in your inbox.
    
    Product
    Features
    Enterprise
    Copilot
    Security
    Pricing
    Team
    Resources
    Roadmap
    Compare GitHub
    Platform
    Developer API
    Partners
    Electron
    GitHub Desktop
    Support
    Docs
    Community Forum
    Professional Services
    Premium Support
    Skills
    Status
    Contact GitHub
    Company
    About
    Customer stories
    Blog
    The ReadME Project
    Careers
    Press
    Inclusion
    Social Impact
    Shop
    X iconGitHub on X
    Facebook iconGitHub on Facebook
    Linkedin iconGitHub on LinkedIn
    YouTube iconGitHub on YouTube
    Twitch iconGitHub on Twitch
    TikTok iconGitHub on TikTok
    GitHub markGitHub’s organization on GitHub
    © 2024 GitHub, Inc.
    Terms
    Privacy (Updated 08/2022)
    Sitemap
    What is Git?
    Manage cookies
    Do not share my personal information
